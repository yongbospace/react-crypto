{"version":3,"sources":["atoms.ts","api.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","logo.png","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["isDarkAtom","atom","key","default","BASE_URL","fetchCoins","fetch","then","response","json","Chart","isDark","useRecoilValue","coinId","useParams","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","map","price","x","time_close","slice","y","open","toFixed","high","low","close","options","theme","mode","chart","toolbar","show","background","stroke","curve","width","grid","yaxis","xaxis","labels","axisTicks","axisBorder","plotOptions","candlestick","colors","upward","downward","InfoWrap","styled","div","prop","cardBgColor","Price","fetchCoinPrice","coinPrice","toLocaleString","minimumFractionDigits","maximumFractionDigits","Container","Header","header","textColor","Logo","img","Title","h1","props","accentColor","ModeSwitch","button","Home","Loader","span","Overview","OverviewItem","Description","p","Taps","Tap","isActive","Coin","state","useLocation","priceMatch","useMatch","chartMatch","setDarkAtom","useSetRecoilState","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","Helmet","name","to","src","style","textShadow","onClick","prev","rank","symbol","quotes","USD","description","total_supply","max_supply","path","element","CoinsList","ul","li","Img","Coins","logo","coin","id","Router","basename","process","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.7cc4728c.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n\nexport function fetchCoinPrice(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/today`).then((response) =>\n    response.json()\n  );\n}\n","import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\ninterface iHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nfunction Chart() {\n  const isDark = useRecoilValue(isDarkAtom);\n  const params = useParams();\n  const { coinId } = params;\n  const { isLoading, data } = useQuery<iHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId!),\n    {\n      refetchInterval: 1000,\n    }\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              data:\n                data?.map((price) => {\n                  return {\n                    x: price.time_close.slice(5, 10),\n                    y: [\n                      price.open.toFixed(2),\n                      price.high.toFixed(2),\n                      price.low.toFixed(2),\n                      price.close.toFixed(2),\n                    ],\n                  };\n                }) ?? [],\n            },\n          ]}\n          options={{\n            theme: { mode: isDark ? \"dark\" : \"light\" },\n            chart: {\n              toolbar: { show: false },\n              background: \"transparent\",\n            },\n            stroke: {\n              curve: \"smooth\",\n              width: 1,\n            },\n            grid: { show: true },\n            yaxis: { show: true },\n            xaxis: {\n              labels: {\n                show: true,\n              },\n              axisTicks: { show: false },\n              axisBorder: { show: false },\n            },\n            plotOptions: {\n              candlestick: {\n                colors: {\n                  upward: \"#ff3f34\",\n                  downward: \"#0fbcf9\",\n                },\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinPrice } from \"../api\";\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nconst InfoWrap = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  span {\n    padding: 10px 5px;\n    background-color: ${(prop) => prop.theme.cardBgColor};\n    border: 1px solid white;\n    text-align: center;\n    border-radius: 10px;\n  }\n`;\n\ninterface IPrice {\n  close: number;\n  high: number;\n  low: number;\n  market_cap: number;\n  open: number;\n  time_close: string;\n  time_open: string;\n  volume: number;\n}\n\nfunction Price() {\n  const params = useParams();\n  const { coinId } = params;\n  const { isLoading, data } = useQuery<IPrice[]>([\"price\", coinId], () =>\n    fetchCoinPrice(coinId!)\n  );\n  const coinPrice: any = data ? data[0] : {};\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <InfoWrap>\n          <span>Open</span>\n          <span>\n            US${\" \"}\n            {coinPrice.open.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n          </span>\n\n          <span>Close</span>\n          <span>\n            US${\" \"}\n            {coinPrice.close.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n          </span>\n\n          <span>High</span>\n          <span>\n            US${\" \"}\n            {coinPrice.high.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            }) || {}}\n          </span>\n\n          <span>Low</span>\n          <span>\n            US${\" \"}\n            {coinPrice.low.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n          </span>\n        </InfoWrap>\n      )}\n    </div>\n  );\n}\n\nexport default Price;\n","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  useLocation,\n  useParams,\n  Link,\n  useMatch,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  button {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 10px;\n    border-radius: 7px;\n    text-transform: uppercase;\n    background-color: ${(prop) => prop.theme.cardBgColor};\n    color: ${(prop) => prop.theme.textColor};\n    border: 1px solid white;\n    width: 40px;\n    height: 40px;\n  }\n`;\nconst Logo = styled.img`\n  width: 28px;\n  height: 28px;\n  margin-right: 5px;\n`;\nconst Title = styled.h1`\n  font-size: 28px;\n  font-weight: 600;\n  color: ${(props) => props.theme.accentColor};\n`;\nconst ModeSwitch = styled.button`\n  position: absolute;\n  right: 0px;\n`;\nconst Home = styled.button`\n  position: absolute;\n  left: 0px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: ${(prop) => prop.theme.cardBgColor};\n  border: 1px solid white;\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Taps = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin-top: 30px;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\nconst Tap = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: ${(prop) => prop.theme.cardBgColor};\n  border: 1px solid white;\n  padding: 7px 0px;\n  border-radius: 10px;\n\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\ninterface RouteState {\n  state: { name: string };\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams();\n  const { state } = useLocation() as RouteState;\n  const priceMatch = useMatch(\"/:coinId/price\");\n  const chartMatch = useMatch(\"/:coinId/chart\");\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const isDark = useRecoilValue(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId!)\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId!),\n    {\n      refetchInterval: 1000,\n    }\n  );\n  const loading = infoLoading || tickersLoading;\n\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading..\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Home>\n          <Link to=\"/\">\n            <span>HOME</span>\n          </Link>\n        </Home>\n        <Logo src={`https://cryptocurrencyliveprices.com/img/${coinId}.png`} />\n        <Title\n          style={\n            isDark\n              ? {\n                  textShadow: \"6px 6px 4px #1e272e\",\n                }\n              : { textShadow: \"3px 3px 2px #d2dae2\" }\n          }\n        >\n          {state?.name ? state.name : loading ? \"Loading..\" : infoData?.name}\n        </Title>\n        <ModeSwitch onClick={toggleDarkAtom}>\n          <span>{isDark ? \"Light\" : \"Dark\"}</span>\n          <span>Mode</span>\n        </ModeSwitch>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>{infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>\n                {tickersData?.quotes.USD.price.toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })}\n              </span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Supply</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Taps>\n            <Tap isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tap>\n            <Tap isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tap>\n          </Taps>\n        </>\n      )}\n      <Routes>\n        <Route path=\"chart\" element={<Chart />} />\n        <Route path=\"price\" element={<Price />} />\n      </Routes>\n    </Container>\n  );\n}\n\nexport default Coin;\n","export default __webpack_public_path__ + \"static/media/logo.cb7fb97e.png\";","import { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { Helmet } from \"react-helmet\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\nimport logo from \"../logo.png\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid white;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in-out;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Logo = styled.img`\n  width: 48px;\n  height: 48px;\n`;\nconst Title = styled.h1`\n  font-size: 42px;\n  color: ${(props) => props.theme.accentColor};\n  text-transform: uppercase;\n  font-weight: 600;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst Img = styled.img`\n  width: 25px;\n  height: 25px;\n  margin-right: 10px;\n`;\n\nconst ModeSwitch = styled.button`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 10px;\n  padding: 5px;\n  border-radius: 7px;\n  text-transform: uppercase;\n  background-color: ${(prop) => prop.theme.cardBgColor};\n  color: ${(prop) => prop.theme.textColor};\n  border: 1px solid white;\n  position: absolute;\n  right: 0px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const isDark = useRecoilValue(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n  return (\n    <Container>\n      <Helmet>\n        <title>Crypto</title>\n      </Helmet>\n      <Header>\n        <Logo src={logo} />\n        <Title\n          style={\n            isDark\n              ? {\n                  textShadow: \"10px 10px 6px #1e272e\",\n                }\n              : { textShadow: \"5px 5px 3px #d2dae2\" }\n          }\n        >\n          Crypto\n        </Title>\n        <ModeSwitch onClick={toggleDarkAtom}>\n          <span>{isDark ? \"Light\" : \"Dark\"}</span>\n          <span>Mode</span>\n        </ModeSwitch>\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link to={`/${coin.id}`} state={{ name: coin.name }}>\n                <Img\n                  src={`https://cryptocurrencyliveprices.com/img/${coin.id}.png`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;\n","import { Routes, Route, BrowserRouter } from \"react-router-dom\";\n\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/:coinId\" element={<Coin />} />\n        <Route path=\"/:coinId/*\" element={<Coin />} />\n        <Route path=\"/\" element={<Coins />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#ffc048\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#ffc048\",\n  cardBgColor: \"white\",\n};\n","import { useRecoilValue } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { isDarkAtom } from \"./atoms\";\nimport Router from \"./Router\";\nimport { darkTheme, lightTheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\nbody{\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor}\n}\na {\n  text-decoration: none;\n  color: inherit\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}